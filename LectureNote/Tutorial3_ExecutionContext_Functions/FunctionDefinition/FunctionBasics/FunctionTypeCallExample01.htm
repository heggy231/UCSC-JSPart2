<!DOCTYPE html>
<html>
<head>
    <!--This example is a modified version of the one used to illustrate the this object. Once again,-->
    <!--sayColor() is defined as a global function, and when it’s called in the global scope, it displays-->
    <!--“red” because this.color evaluates to window.color. You can then call the function explicitly in-->
    <!--the global scope by using sayColor.call(this) and sayColor.call(window), which both display-->
    <!--“red”. Running sayColor.call(o) switches the context of the function such that this points to o,-->
    <!--resulting in a display of “blue”.-->
    <title>Function Type call() Example</title>
    <script type="text/javascript">
        
        window.color = "red";
        var o = { color: "blue"};


        
        function sayColor(){

            alert(this.color);

        }


        
        sayColor();            //red
        
        sayColor.call(this);   //red
        sayColor.call(window); //red
        sayColor.call(o);      //blue //this is going to cahnge the global context of the funciton
        //to the context of the object







//


//        var Bob = {
//            name: "Bob",
//            greet: function() {
//                alert("Hi, I'm " + this.name);
//            }
//        }
//
//        var Alice = {
//            name: "Alice"
//        };
//
//        Bob.greet.call(Alice);
//        // -or-
//        Bob.greet.apply(Alice);

    </script>
</head>
<body>

</body>
</html>